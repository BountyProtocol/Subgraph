// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class CTXPost extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("entity", Value.fromString(""));
    this.set("author", Value.fromString(""));
    this.set("entityRole", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CTXPost entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save CTXPost entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("CTXPost", id.toString(), this);
    }
  }

  static load(id: string): CTXPost | null {
    return changetype<CTXPost | null>(store.get("CTXPost", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get entity(): string {
    let value = this.get("entity");
    return value!.toString();
  }

  set entity(value: string) {
    this.set("entity", Value.fromString(value));
  }

  get createdDate(): BigInt | null {
    let value = this.get("createdDate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set createdDate(value: BigInt | null) {
    if (!value) {
      this.unset("createdDate");
    } else {
      this.set("createdDate", Value.fromBigInt(<BigInt>value));
    }
  }

  get author(): string {
    let value = this.get("author");
    return value!.toString();
  }

  set author(value: string) {
    this.set("author", Value.fromString(value));
  }

  get entityRole(): string {
    let value = this.get("entityRole");
    return value!.toString();
  }

  set entityRole(value: string) {
    this.set("entityRole", Value.fromString(value));
  }

  get uri(): string | null {
    let value = this.get("uri");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set uri(value: string | null) {
    if (!value) {
      this.unset("uri");
    } else {
      this.set("uri", Value.fromString(<string>value));
    }
  }

  get metadata(): Bytes | null {
    let value = this.get("metadata");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set metadata(value: Bytes | null) {
    if (!value) {
      this.unset("metadata");
    } else {
      this.set("metadata", Value.fromBytes(<Bytes>value));
    }
  }
}

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("sbt", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Account entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Account entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Account", id.toString(), this);
    }
  }

  static load(id: string): Account | null {
    return changetype<Account | null>(store.get("Account", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sbt(): string {
    let value = this.get("sbt");
    return value!.toString();
  }

  set sbt(value: string) {
    this.set("sbt", Value.fromString(value));
  }
}

export class OpenRepo extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OpenRepo entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save OpenRepo entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("OpenRepo", id.toString(), this);
    }
  }

  static load(id: string): OpenRepo | null {
    return changetype<OpenRepo | null>(store.get("OpenRepo", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get conf(): Array<string> | null {
    let value = this.get("conf");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set conf(value: Array<string> | null) {
    if (!value) {
      this.unset("conf");
    } else {
      this.set("conf", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class RelAddress extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("owner", Value.fromString(""));
    this.set("key", Value.fromString(""));
    this.set("value", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RelAddress entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save RelAddress entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("RelAddress", id.toString(), this);
    }
  }

  static load(id: string): RelAddress | null {
    return changetype<RelAddress | null>(store.get("RelAddress", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get key(): string {
    let value = this.get("key");
    return value!.toString();
  }

  set key(value: string) {
    this.set("key", Value.fromString(value));
  }

  get value(): Array<string> {
    let value = this.get("value");
    return value!.toStringArray();
  }

  set value(value: Array<string>) {
    this.set("value", Value.fromStringArray(value));
  }
}

export class Hub extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("OpenRepo", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Hub entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Hub entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Hub", id.toString(), this);
    }
  }

  static load(id: string): Hub | null {
    return changetype<Hub | null>(store.get("Hub", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get OpenRepo(): string {
    let value = this.get("OpenRepo");
    return value!.toString();
  }

  set OpenRepo(value: string) {
    this.set("OpenRepo", Value.fromString(value));
  }

  get conf(): Array<string> | null {
    let value = this.get("conf");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set conf(value: Array<string> | null) {
    if (!value) {
      this.unset("conf");
    } else {
      this.set("conf", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class HubConf extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save HubConf entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save HubConf entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("HubConf", id.toString(), this);
    }
  }

  static load(id: string): HubConf | null {
    return changetype<HubConf | null>(store.get("HubConf", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }
}

export class GameRelAddress extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("origin", Value.fromString(""));
    this.set("key", Value.fromString(""));
    this.set("value", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GameRelAddress entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save GameRelAddress entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("GameRelAddress", id.toString(), this);
    }
  }

  static load(id: string): GameRelAddress | null {
    return changetype<GameRelAddress | null>(store.get("GameRelAddress", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get origin(): string {
    let value = this.get("origin");
    return value!.toString();
  }

  set origin(value: string) {
    this.set("origin", Value.fromString(value));
  }

  get key(): string {
    let value = this.get("key");
    return value!.toString();
  }

  set key(value: string) {
    this.set("key", Value.fromString(value));
  }

  get value(): Array<string> {
    let value = this.get("value");
    return value!.toStringArray();
  }

  set value(value: Array<string>) {
    this.set("value", Value.fromStringArray(value));
  }
}

export class ClaimRelAddress extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("origin", Value.fromString(""));
    this.set("key", Value.fromString(""));
    this.set("value", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ClaimRelAddress entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ClaimRelAddress entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ClaimRelAddress", id.toString(), this);
    }
  }

  static load(id: string): ClaimRelAddress | null {
    return changetype<ClaimRelAddress | null>(store.get("ClaimRelAddress", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get origin(): string {
    let value = this.get("origin");
    return value!.toString();
  }

  set origin(value: string) {
    this.set("origin", Value.fromString(value));
  }

  get key(): string {
    let value = this.get("key");
    return value!.toString();
  }

  set key(value: string) {
    this.set("key", Value.fromString(value));
  }

  get value(): Array<string> {
    let value = this.get("value");
    return value!.toStringArray();
  }

  set value(value: Array<string>) {
    this.set("value", Value.fromStringArray(value));
  }
}

export class AccountRelAddress extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("origin", Value.fromString(""));
    this.set("key", Value.fromString(""));
    this.set("value", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AccountRelAddress entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save AccountRelAddress entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("AccountRelAddress", id.toString(), this);
    }
  }

  static load(id: string): AccountRelAddress | null {
    return changetype<AccountRelAddress | null>(
      store.get("AccountRelAddress", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get origin(): string {
    let value = this.get("origin");
    return value!.toString();
  }

  set origin(value: string) {
    this.set("origin", Value.fromString(value));
  }

  get key(): string {
    let value = this.get("key");
    return value!.toString();
  }

  set key(value: string) {
    this.set("key", Value.fromString(value));
  }

  get value(): Array<string> {
    let value = this.get("value");
    return value!.toStringArray();
  }

  set value(value: Array<string>) {
    this.set("value", Value.fromStringArray(value));
  }
}

export class Soul extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("owner", Value.fromString(""));
    this.set("type", Value.fromString(""));
    this.set("uriImage", Value.fromString(""));
    this.set("uriFirstName", Value.fromString(""));
    this.set("uriLastName", Value.fromString(""));
    this.set("name", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Soul entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Soul entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Soul", id.toString(), this);
    }
  }

  static load(id: string): Soul | null {
    return changetype<Soul | null>(store.get("Soul", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get uri(): string | null {
    let value = this.get("uri");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set uri(value: string | null) {
    if (!value) {
      this.unset("uri");
    } else {
      this.set("uri", Value.fromString(<string>value));
    }
  }

  get uriData(): Bytes | null {
    let value = this.get("uriData");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set uriData(value: Bytes | null) {
    if (!value) {
      this.unset("uriData");
    } else {
      this.set("uriData", Value.fromBytes(<Bytes>value));
    }
  }

  get metadata(): Bytes | null {
    let value = this.get("metadata");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set metadata(value: Bytes | null) {
    if (!value) {
      this.unset("metadata");
    } else {
      this.set("metadata", Value.fromBytes(<Bytes>value));
    }
  }

  get uriImage(): string {
    let value = this.get("uriImage");
    return value!.toString();
  }

  set uriImage(value: string) {
    this.set("uriImage", Value.fromString(value));
  }

  get uriFirstName(): string {
    let value = this.get("uriFirstName");
    return value!.toString();
  }

  set uriFirstName(value: string) {
    this.set("uriFirstName", Value.fromString(value));
  }

  get uriLastName(): string {
    let value = this.get("uriLastName");
    return value!.toString();
  }

  set uriLastName(value: string) {
    this.set("uriLastName", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get tags(): Array<string> | null {
    let value = this.get("tags");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set tags(value: Array<string> | null) {
    if (!value) {
      this.unset("tags");
    } else {
      this.set("tags", Value.fromStringArray(<Array<string>>value));
    }
  }

  get searchField(): string | null {
    let value = this.get("searchField");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set searchField(value: string | null) {
    if (!value) {
      this.unset("searchField");
    } else {
      this.set("searchField", Value.fromString(<string>value));
    }
  }

  get participantGame(): Array<string> {
    let value = this.get("participantGame");
    return value!.toStringArray();
  }

  set participantGame(value: Array<string>) {
    this.set("participantGame", Value.fromStringArray(value));
  }

  get participantProc(): Array<string> {
    let value = this.get("participantProc");
    return value!.toStringArray();
  }

  set participantProc(value: Array<string>) {
    this.set("participantProc", Value.fromStringArray(value));
  }

  get opinion(): Array<string> {
    let value = this.get("opinion");
    return value!.toStringArray();
  }

  set opinion(value: Array<string>) {
    this.set("opinion", Value.fromStringArray(value));
  }

  get opinionOn(): Array<string> {
    let value = this.get("opinionOn");
    return value!.toStringArray();
  }

  set opinionOn(value: Array<string>) {
    this.set("opinionOn", Value.fromStringArray(value));
  }

  get assoc(): Array<string> {
    let value = this.get("assoc");
    return value!.toStringArray();
  }

  set assoc(value: Array<string>) {
    this.set("assoc", Value.fromStringArray(value));
  }
}

export class SoulSoulOpinion extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("subject", Value.fromString(""));
    this.set("object", Value.fromString(""));
    this.set("domain", Value.fromString(""));
    this.set("negativeRating", Value.fromBigInt(BigInt.zero()));
    this.set("positiveRating", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SoulSoulOpinion entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save SoulSoulOpinion entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("SoulSoulOpinion", id.toString(), this);
    }
  }

  static load(id: string): SoulSoulOpinion | null {
    return changetype<SoulSoulOpinion | null>(store.get("SoulSoulOpinion", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get subject(): string {
    let value = this.get("subject");
    return value!.toString();
  }

  set subject(value: string) {
    this.set("subject", Value.fromString(value));
  }

  get object(): string {
    let value = this.get("object");
    return value!.toString();
  }

  set object(value: string) {
    this.set("object", Value.fromString(value));
  }

  get domain(): string {
    let value = this.get("domain");
    return value!.toString();
  }

  set domain(value: string) {
    this.set("domain", Value.fromString(value));
  }

  get negativeRating(): BigInt {
    let value = this.get("negativeRating");
    return value!.toBigInt();
  }

  set negativeRating(value: BigInt) {
    this.set("negativeRating", Value.fromBigInt(value));
  }

  get positiveRating(): BigInt {
    let value = this.get("positiveRating");
    return value!.toBigInt();
  }

  set positiveRating(value: BigInt) {
    this.set("positiveRating", Value.fromBigInt(value));
  }
}

export class Game extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("hub", Value.fromString(""));
    this.set("name", Value.fromString(""));
    this.set("type", Value.fromString(""));
    this.set("createdDate", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Game entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Game entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Game", id.toString(), this);
    }
  }

  static load(id: string): Game | null {
    return changetype<Game | null>(store.get("Game", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hub(): string {
    let value = this.get("hub");
    return value!.toString();
  }

  set hub(value: string) {
    this.set("hub", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get uri(): string | null {
    let value = this.get("uri");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set uri(value: string | null) {
    if (!value) {
      this.unset("uri");
    } else {
      this.set("uri", Value.fromString(<string>value));
    }
  }

  get uriData(): Bytes | null {
    let value = this.get("uriData");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set uriData(value: Bytes | null) {
    if (!value) {
      this.unset("uriData");
    } else {
      this.set("uriData", Value.fromBytes(<Bytes>value));
    }
  }

  get metadata(): Bytes | null {
    let value = this.get("metadata");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set metadata(value: Bytes | null) {
    if (!value) {
      this.unset("metadata");
    } else {
      this.set("metadata", Value.fromBytes(<Bytes>value));
    }
  }

  get createdDate(): BigInt {
    let value = this.get("createdDate");
    return value!.toBigInt();
  }

  set createdDate(value: BigInt) {
    this.set("createdDate", Value.fromBigInt(value));
  }

  get nominations(): Array<string> {
    let value = this.get("nominations");
    return value!.toStringArray();
  }

  set nominations(value: Array<string>) {
    this.set("nominations", Value.fromStringArray(value));
  }

  get posts(): Array<string> {
    let value = this.get("posts");
    return value!.toStringArray();
  }

  set posts(value: Array<string>) {
    this.set("posts", Value.fromStringArray(value));
  }

  get roles(): Array<string> {
    let value = this.get("roles");
    return value!.toStringArray();
  }

  set roles(value: Array<string>) {
    this.set("roles", Value.fromStringArray(value));
  }

  get parts(): Array<string> {
    let value = this.get("parts");
    return value!.toStringArray();
  }

  set parts(value: Array<string>) {
    this.set("parts", Value.fromStringArray(value));
  }

  get assoc(): Array<string> {
    let value = this.get("assoc");
    return value!.toStringArray();
  }

  set assoc(value: Array<string>) {
    this.set("assoc", Value.fromStringArray(value));
  }
}

export class GameRole extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("game", Value.fromString(""));
    this.set("roleId", Value.fromBigInt(BigInt.zero()));
    this.set("name", Value.fromString(""));
    this.set("souls", Value.fromStringArray(new Array(0)));
    this.set("soulsCount", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GameRole entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save GameRole entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("GameRole", id.toString(), this);
    }
  }

  static load(id: string): GameRole | null {
    return changetype<GameRole | null>(store.get("GameRole", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get game(): string {
    let value = this.get("game");
    return value!.toString();
  }

  set game(value: string) {
    this.set("game", Value.fromString(value));
  }

  get roleId(): BigInt {
    let value = this.get("roleId");
    return value!.toBigInt();
  }

  set roleId(value: BigInt) {
    this.set("roleId", Value.fromBigInt(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get souls(): Array<string> {
    let value = this.get("souls");
    return value!.toStringArray();
  }

  set souls(value: Array<string>) {
    this.set("souls", Value.fromStringArray(value));
  }

  get soulsCount(): i32 {
    let value = this.get("soulsCount");
    return value!.toI32();
  }

  set soulsCount(value: i32) {
    this.set("soulsCount", Value.fromI32(value));
  }
}

export class GameRule extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("game", Value.fromString(""));
    this.set("about", Value.fromString(""));
    this.set("ruleId", Value.fromBigInt(BigInt.zero()));
    this.set("effects", Value.fromStringArray(new Array(0)));
    this.set("isDisabled", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GameRule entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save GameRule entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("GameRule", id.toString(), this);
    }
  }

  static load(id: string): GameRule | null {
    return changetype<GameRule | null>(store.get("GameRule", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get game(): string {
    let value = this.get("game");
    return value!.toString();
  }

  set game(value: string) {
    this.set("game", Value.fromString(value));
  }

  get about(): string {
    let value = this.get("about");
    return value!.toString();
  }

  set about(value: string) {
    this.set("about", Value.fromString(value));
  }

  get aboutSubject(): string | null {
    let value = this.get("aboutSubject");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set aboutSubject(value: string | null) {
    if (!value) {
      this.unset("aboutSubject");
    } else {
      this.set("aboutSubject", Value.fromString(<string>value));
    }
  }

  get ruleId(): BigInt {
    let value = this.get("ruleId");
    return value!.toBigInt();
  }

  set ruleId(value: BigInt) {
    this.set("ruleId", Value.fromBigInt(value));
  }

  get affected(): string | null {
    let value = this.get("affected");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set affected(value: string | null) {
    if (!value) {
      this.unset("affected");
    } else {
      this.set("affected", Value.fromString(<string>value));
    }
  }

  get uri(): string | null {
    let value = this.get("uri");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set uri(value: string | null) {
    if (!value) {
      this.unset("uri");
    } else {
      this.set("uri", Value.fromString(<string>value));
    }
  }

  get uriData(): Bytes | null {
    let value = this.get("uriData");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set uriData(value: Bytes | null) {
    if (!value) {
      this.unset("uriData");
    } else {
      this.set("uriData", Value.fromBytes(<Bytes>value));
    }
  }

  get metadata(): Bytes | null {
    let value = this.get("metadata");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set metadata(value: Bytes | null) {
    if (!value) {
      this.unset("metadata");
    } else {
      this.set("metadata", Value.fromBytes(<Bytes>value));
    }
  }

  get uriName(): string | null {
    let value = this.get("uriName");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set uriName(value: string | null) {
    if (!value) {
      this.unset("uriName");
    } else {
      this.set("uriName", Value.fromString(<string>value));
    }
  }

  get negation(): boolean {
    let value = this.get("negation");
    return value!.toBoolean();
  }

  set negation(value: boolean) {
    this.set("negation", Value.fromBoolean(value));
  }

  get effects(): Array<string> {
    let value = this.get("effects");
    return value!.toStringArray();
  }

  set effects(value: Array<string>) {
    this.set("effects", Value.fromStringArray(value));
  }

  get effectsBlock(): BigInt | null {
    let value = this.get("effectsBlock");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set effectsBlock(value: BigInt | null) {
    if (!value) {
      this.unset("effectsBlock");
    } else {
      this.set("effectsBlock", Value.fromBigInt(<BigInt>value));
    }
  }

  get confirmationRuling(): string | null {
    let value = this.get("confirmationRuling");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set confirmationRuling(value: string | null) {
    if (!value) {
      this.unset("confirmationRuling");
    } else {
      this.set("confirmationRuling", Value.fromString(<string>value));
    }
  }

  get confirmationEvidence(): boolean {
    let value = this.get("confirmationEvidence");
    return value!.toBoolean();
  }

  set confirmationEvidence(value: boolean) {
    this.set("confirmationEvidence", Value.fromBoolean(value));
  }

  get confirmationWitness(): BigInt | null {
    let value = this.get("confirmationWitness");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set confirmationWitness(value: BigInt | null) {
    if (!value) {
      this.unset("confirmationWitness");
    } else {
      this.set("confirmationWitness", Value.fromBigInt(<BigInt>value));
    }
  }

  get isPositive(): boolean {
    let value = this.get("isPositive");
    return value!.toBoolean();
  }

  set isPositive(value: boolean) {
    this.set("isPositive", Value.fromBoolean(value));
  }

  get isDisabled(): boolean {
    let value = this.get("isDisabled");
    return value!.toBoolean();
  }

  set isDisabled(value: boolean) {
    this.set("isDisabled", Value.fromBoolean(value));
  }
}

export class GameRuleEffect extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("rule", Value.fromString(""));
    this.set("name", Value.fromString(""));
    this.set("direction", Value.fromBoolean(false));
    this.set("value", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GameRuleEffect entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save GameRuleEffect entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("GameRuleEffect", id.toString(), this);
    }
  }

  static load(id: string): GameRuleEffect | null {
    return changetype<GameRuleEffect | null>(store.get("GameRuleEffect", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get rule(): string {
    let value = this.get("rule");
    return value!.toString();
  }

  set rule(value: string) {
    this.set("rule", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get direction(): boolean {
    let value = this.get("direction");
    return value!.toBoolean();
  }

  set direction(value: boolean) {
    this.set("direction", Value.fromBoolean(value));
  }

  get value(): i32 {
    let value = this.get("value");
    return value!.toI32();
  }

  set value(value: i32) {
    this.set("value", Value.fromI32(value));
  }
}

export class GameNomination extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("game", Value.fromString(""));
    this.set("createdDate", Value.fromBigInt(BigInt.zero()));
    this.set("nominator", Value.fromString(""));
    this.set("nominated", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GameNomination entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save GameNomination entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("GameNomination", id.toString(), this);
    }
  }

  static load(id: string): GameNomination | null {
    return changetype<GameNomination | null>(store.get("GameNomination", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get game(): string {
    let value = this.get("game");
    return value!.toString();
  }

  set game(value: string) {
    this.set("game", Value.fromString(value));
  }

  get createdDate(): BigInt {
    let value = this.get("createdDate");
    return value!.toBigInt();
  }

  set createdDate(value: BigInt) {
    this.set("createdDate", Value.fromBigInt(value));
  }

  get nominator(): string {
    let value = this.get("nominator");
    return value!.toString();
  }

  set nominator(value: string) {
    this.set("nominator", Value.fromString(value));
  }

  get nominated(): string {
    let value = this.get("nominated");
    return value!.toString();
  }

  set nominated(value: string) {
    this.set("nominated", Value.fromString(value));
  }
}

export class GamePost extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("entity", Value.fromString(""));
    this.set("author", Value.fromString(""));
    this.set("entityRole", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GamePost entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save GamePost entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("GamePost", id.toString(), this);
    }
  }

  static load(id: string): GamePost | null {
    return changetype<GamePost | null>(store.get("GamePost", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get entity(): string {
    let value = this.get("entity");
    return value!.toString();
  }

  set entity(value: string) {
    this.set("entity", Value.fromString(value));
  }

  get createdDate(): BigInt | null {
    let value = this.get("createdDate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set createdDate(value: BigInt | null) {
    if (!value) {
      this.unset("createdDate");
    } else {
      this.set("createdDate", Value.fromBigInt(<BigInt>value));
    }
  }

  get author(): string {
    let value = this.get("author");
    return value!.toString();
  }

  set author(value: string) {
    this.set("author", Value.fromString(value));
  }

  get entityRole(): string {
    let value = this.get("entityRole");
    return value!.toString();
  }

  set entityRole(value: string) {
    this.set("entityRole", Value.fromString(value));
  }

  get uri(): string | null {
    let value = this.get("uri");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set uri(value: string | null) {
    if (!value) {
      this.unset("uri");
    } else {
      this.set("uri", Value.fromString(<string>value));
    }
  }

  get metadata(): Bytes | null {
    let value = this.get("metadata");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set metadata(value: Bytes | null) {
    if (!value) {
      this.unset("metadata");
    } else {
      this.set("metadata", Value.fromBytes(<Bytes>value));
    }
  }
}

export class Action extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Action entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Action entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Action", id.toString(), this);
    }
  }

  static load(id: string): Action | null {
    return changetype<Action | null>(store.get("Action", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get subject(): string | null {
    let value = this.get("subject");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set subject(value: string | null) {
    if (!value) {
      this.unset("subject");
    } else {
      this.set("subject", Value.fromString(<string>value));
    }
  }

  get verb(): string | null {
    let value = this.get("verb");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set verb(value: string | null) {
    if (!value) {
      this.unset("verb");
    } else {
      this.set("verb", Value.fromString(<string>value));
    }
  }

  get object(): string | null {
    let value = this.get("object");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set object(value: string | null) {
    if (!value) {
      this.unset("object");
    } else {
      this.set("object", Value.fromString(<string>value));
    }
  }

  get tool(): string | null {
    let value = this.get("tool");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tool(value: string | null) {
    if (!value) {
      this.unset("tool");
    } else {
      this.set("tool", Value.fromString(<string>value));
    }
  }

  get uri(): string | null {
    let value = this.get("uri");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set uri(value: string | null) {
    if (!value) {
      this.unset("uri");
    } else {
      this.set("uri", Value.fromString(<string>value));
    }
  }

  get uriData(): Bytes | null {
    let value = this.get("uriData");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set uriData(value: Bytes | null) {
    if (!value) {
      this.unset("uriData");
    } else {
      this.set("uriData", Value.fromBytes(<Bytes>value));
    }
  }

  get metadata(): Bytes | null {
    let value = this.get("metadata");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set metadata(value: Bytes | null) {
    if (!value) {
      this.unset("metadata");
    } else {
      this.set("metadata", Value.fromBytes(<Bytes>value));
    }
  }

  get rules(): Array<string> {
    let value = this.get("rules");
    return value!.toStringArray();
  }

  set rules(value: Array<string>) {
    this.set("rules", Value.fromStringArray(value));
  }
}

export class Claim extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("name", Value.fromString(""));
    this.set("type", Value.fromString(""));
    this.set("stage", Value.fromI32(0));
    this.set("createdDate", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Claim entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Claim entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Claim", id.toString(), this);
    }
  }

  static load(id: string): Claim | null {
    return changetype<Claim | null>(store.get("Claim", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hub(): string | null {
    let value = this.get("hub");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set hub(value: string | null) {
    if (!value) {
      this.unset("hub");
    } else {
      this.set("hub", Value.fromString(<string>value));
    }
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get game(): string | null {
    let value = this.get("game");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set game(value: string | null) {
    if (!value) {
      this.unset("game");
    } else {
      this.set("game", Value.fromString(<string>value));
    }
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get uri(): string | null {
    let value = this.get("uri");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set uri(value: string | null) {
    if (!value) {
      this.unset("uri");
    } else {
      this.set("uri", Value.fromString(<string>value));
    }
  }

  get uriData(): Bytes | null {
    let value = this.get("uriData");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set uriData(value: Bytes | null) {
    if (!value) {
      this.unset("uriData");
    } else {
      this.set("uriData", Value.fromBytes(<Bytes>value));
    }
  }

  get metadata(): Bytes | null {
    let value = this.get("metadata");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set metadata(value: Bytes | null) {
    if (!value) {
      this.unset("metadata");
    } else {
      this.set("metadata", Value.fromBytes(<Bytes>value));
    }
  }

  get stage(): i32 {
    let value = this.get("stage");
    return value!.toI32();
  }

  set stage(value: i32) {
    this.set("stage", Value.fromI32(value));
  }

  get createdDate(): BigInt {
    let value = this.get("createdDate");
    return value!.toBigInt();
  }

  set createdDate(value: BigInt) {
    this.set("createdDate", Value.fromBigInt(value));
  }

  get updatedDate(): BigInt | null {
    let value = this.get("updatedDate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set updatedDate(value: BigInt | null) {
    if (!value) {
      this.unset("updatedDate");
    } else {
      this.set("updatedDate", Value.fromBigInt(<BigInt>value));
    }
  }

  get nominations(): Array<string> {
    let value = this.get("nominations");
    return value!.toStringArray();
  }

  set nominations(value: Array<string>) {
    this.set("nominations", Value.fromStringArray(value));
  }

  get posts(): Array<string> {
    let value = this.get("posts");
    return value!.toStringArray();
  }

  set posts(value: Array<string>) {
    this.set("posts", Value.fromStringArray(value));
  }

  get stageURI(): Array<string> {
    let value = this.get("stageURI");
    return value!.toStringArray();
  }

  set stageURI(value: Array<string>) {
    this.set("stageURI", Value.fromStringArray(value));
  }

  get roles(): Array<string> {
    let value = this.get("roles");
    return value!.toStringArray();
  }

  set roles(value: Array<string>) {
    this.set("roles", Value.fromStringArray(value));
  }

  get parts(): Array<string> {
    let value = this.get("parts");
    return value!.toStringArray();
  }

  set parts(value: Array<string>) {
    this.set("parts", Value.fromStringArray(value));
  }

  get assoc(): Array<string> {
    let value = this.get("assoc");
    return value!.toStringArray();
  }

  set assoc(value: Array<string>) {
    this.set("assoc", Value.fromStringArray(value));
  }
}

export class ClaimStageURI extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("entity", Value.fromString(""));
    this.set("stage", Value.fromI32(0));
    this.set("uri", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ClaimStageURI entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ClaimStageURI entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ClaimStageURI", id.toString(), this);
    }
  }

  static load(id: string): ClaimStageURI | null {
    return changetype<ClaimStageURI | null>(store.get("ClaimStageURI", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get entity(): string {
    let value = this.get("entity");
    return value!.toString();
  }

  set entity(value: string) {
    this.set("entity", Value.fromString(value));
  }

  get stage(): i32 {
    let value = this.get("stage");
    return value!.toI32();
  }

  set stage(value: i32) {
    this.set("stage", Value.fromI32(value));
  }

  get uri(): string {
    let value = this.get("uri");
    return value!.toString();
  }

  set uri(value: string) {
    this.set("uri", Value.fromString(value));
  }

  get Author(): string | null {
    let value = this.get("Author");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set Author(value: string | null) {
    if (!value) {
      this.unset("Author");
    } else {
      this.set("Author", Value.fromString(<string>value));
    }
  }
}

export class ClaimRole extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("claim", Value.fromString(""));
    this.set("name", Value.fromString(""));
    this.set("roleId", Value.fromBigInt(BigInt.zero()));
    this.set("souls", Value.fromStringArray(new Array(0)));
    this.set("soulsCount", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ClaimRole entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ClaimRole entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ClaimRole", id.toString(), this);
    }
  }

  static load(id: string): ClaimRole | null {
    return changetype<ClaimRole | null>(store.get("ClaimRole", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get claim(): string {
    let value = this.get("claim");
    return value!.toString();
  }

  set claim(value: string) {
    this.set("claim", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get roleId(): BigInt {
    let value = this.get("roleId");
    return value!.toBigInt();
  }

  set roleId(value: BigInt) {
    this.set("roleId", Value.fromBigInt(value));
  }

  get souls(): Array<string> {
    let value = this.get("souls");
    return value!.toStringArray();
  }

  set souls(value: Array<string>) {
    this.set("souls", Value.fromStringArray(value));
  }

  get soulsCount(): i32 {
    let value = this.get("soulsCount");
    return value!.toI32();
  }

  set soulsCount(value: i32) {
    this.set("soulsCount", Value.fromI32(value));
  }
}

export class ClaimNomination extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("claim", Value.fromString(""));
    this.set("createdDate", Value.fromBigInt(BigInt.zero()));
    this.set("nominator", Value.fromString(""));
    this.set("nominated", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ClaimNomination entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ClaimNomination entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ClaimNomination", id.toString(), this);
    }
  }

  static load(id: string): ClaimNomination | null {
    return changetype<ClaimNomination | null>(store.get("ClaimNomination", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get claim(): string {
    let value = this.get("claim");
    return value!.toString();
  }

  set claim(value: string) {
    this.set("claim", Value.fromString(value));
  }

  get createdDate(): BigInt {
    let value = this.get("createdDate");
    return value!.toBigInt();
  }

  set createdDate(value: BigInt) {
    this.set("createdDate", Value.fromBigInt(value));
  }

  get nominator(): string {
    let value = this.get("nominator");
    return value!.toString();
  }

  set nominator(value: string) {
    this.set("nominator", Value.fromString(value));
  }

  get nominated(): string {
    let value = this.get("nominated");
    return value!.toString();
  }

  set nominated(value: string) {
    this.set("nominated", Value.fromString(value));
  }
}

export class ClaimPost extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("entity", Value.fromString(""));
    this.set("author", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ClaimPost entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ClaimPost entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ClaimPost", id.toString(), this);
    }
  }

  static load(id: string): ClaimPost | null {
    return changetype<ClaimPost | null>(store.get("ClaimPost", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get entity(): string {
    let value = this.get("entity");
    return value!.toString();
  }

  set entity(value: string) {
    this.set("entity", Value.fromString(value));
  }

  get createdDate(): BigInt | null {
    let value = this.get("createdDate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set createdDate(value: BigInt | null) {
    if (!value) {
      this.unset("createdDate");
    } else {
      this.set("createdDate", Value.fromBigInt(<BigInt>value));
    }
  }

  get author(): string {
    let value = this.get("author");
    return value!.toString();
  }

  set author(value: string) {
    this.set("author", Value.fromString(value));
  }

  get entityRole(): string | null {
    let value = this.get("entityRole");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set entityRole(value: string | null) {
    if (!value) {
      this.unset("entityRole");
    } else {
      this.set("entityRole", Value.fromString(<string>value));
    }
  }

  get uri(): string | null {
    let value = this.get("uri");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set uri(value: string | null) {
    if (!value) {
      this.unset("uri");
    } else {
      this.set("uri", Value.fromString(<string>value));
    }
  }

  get metadata(): Bytes | null {
    let value = this.get("metadata");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set metadata(value: Bytes | null) {
    if (!value) {
      this.unset("metadata");
    } else {
      this.set("metadata", Value.fromBytes(<Bytes>value));
    }
  }
}

export class GameParticipant extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("entity", Value.fromString(""));
    this.set("sbt", Value.fromString(""));
    this.set("roles", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GameParticipant entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save GameParticipant entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("GameParticipant", id.toString(), this);
    }
  }

  static load(id: string): GameParticipant | null {
    return changetype<GameParticipant | null>(store.get("GameParticipant", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get entity(): string {
    let value = this.get("entity");
    return value!.toString();
  }

  set entity(value: string) {
    this.set("entity", Value.fromString(value));
  }

  get sbt(): string {
    let value = this.get("sbt");
    return value!.toString();
  }

  set sbt(value: string) {
    this.set("sbt", Value.fromString(value));
  }

  get roles(): Array<string> {
    let value = this.get("roles");
    return value!.toStringArray();
  }

  set roles(value: Array<string>) {
    this.set("roles", Value.fromStringArray(value));
  }
}

export class ProcParticipant extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("entity", Value.fromString(""));
    this.set("sbt", Value.fromString(""));
    this.set("roles", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ProcParticipant entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ProcParticipant entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ProcParticipant", id.toString(), this);
    }
  }

  static load(id: string): ProcParticipant | null {
    return changetype<ProcParticipant | null>(store.get("ProcParticipant", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get entity(): string {
    let value = this.get("entity");
    return value!.toString();
  }

  set entity(value: string) {
    this.set("entity", Value.fromString(value));
  }

  get sbt(): string {
    let value = this.get("sbt");
    return value!.toString();
  }

  set sbt(value: string) {
    this.set("sbt", Value.fromString(value));
  }

  get roles(): Array<string> {
    let value = this.get("roles");
    return value!.toStringArray();
  }

  set roles(value: Array<string>) {
    this.set("roles", Value.fromStringArray(value));
  }
}

export class GameAssoc extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("bEnt", Value.fromString(""));
    this.set("sbt", Value.fromString(""));
    this.set("role", Value.fromBigInt(BigInt.zero()));
    this.set("qty", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GameAssoc entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save GameAssoc entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("GameAssoc", id.toString(), this);
    }
  }

  static load(id: string): GameAssoc | null {
    return changetype<GameAssoc | null>(store.get("GameAssoc", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get bEnt(): string {
    let value = this.get("bEnt");
    return value!.toString();
  }

  set bEnt(value: string) {
    this.set("bEnt", Value.fromString(value));
  }

  get sbt(): string {
    let value = this.get("sbt");
    return value!.toString();
  }

  set sbt(value: string) {
    this.set("sbt", Value.fromString(value));
  }

  get role(): BigInt {
    let value = this.get("role");
    return value!.toBigInt();
  }

  set role(value: BigInt) {
    this.set("role", Value.fromBigInt(value));
  }

  get qty(): BigInt {
    let value = this.get("qty");
    return value!.toBigInt();
  }

  set qty(value: BigInt) {
    this.set("qty", Value.fromBigInt(value));
  }
}

export class ProcAssoc extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("bEnt", Value.fromString(""));
    this.set("sbt", Value.fromString(""));
    this.set("role", Value.fromBigInt(BigInt.zero()));
    this.set("qty", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ProcAssoc entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ProcAssoc entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ProcAssoc", id.toString(), this);
    }
  }

  static load(id: string): ProcAssoc | null {
    return changetype<ProcAssoc | null>(store.get("ProcAssoc", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get bEnt(): string {
    let value = this.get("bEnt");
    return value!.toString();
  }

  set bEnt(value: string) {
    this.set("bEnt", Value.fromString(value));
  }

  get sbt(): string {
    let value = this.get("sbt");
    return value!.toString();
  }

  set sbt(value: string) {
    this.set("sbt", Value.fromString(value));
  }

  get role(): BigInt {
    let value = this.get("role");
    return value!.toBigInt();
  }

  set role(value: BigInt) {
    this.set("role", Value.fromBigInt(value));
  }

  get qty(): BigInt {
    let value = this.get("qty");
    return value!.toBigInt();
  }

  set qty(value: BigInt) {
    this.set("qty", Value.fromBigInt(value));
  }
}

export class Assoc extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("aEnd", Value.fromString(""));
    this.set("bEnd", Value.fromString(""));
    this.set("role", Value.fromBigInt(BigInt.zero()));
    this.set("qty", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Assoc entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Assoc entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Assoc", id.toString(), this);
    }
  }

  static load(id: string): Assoc | null {
    return changetype<Assoc | null>(store.get("Assoc", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get aEnd(): string {
    let value = this.get("aEnd");
    return value!.toString();
  }

  set aEnd(value: string) {
    this.set("aEnd", Value.fromString(value));
  }

  get bEnd(): string {
    let value = this.get("bEnd");
    return value!.toString();
  }

  set bEnd(value: string) {
    this.set("bEnd", Value.fromString(value));
  }

  get role(): BigInt {
    let value = this.get("role");
    return value!.toBigInt();
  }

  set role(value: BigInt) {
    this.set("role", Value.fromBigInt(value));
  }

  get qty(): BigInt {
    let value = this.get("qty");
    return value!.toBigInt();
  }

  set qty(value: BigInt) {
    this.set("qty", Value.fromBigInt(value));
  }
}
