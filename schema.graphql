type Account @entity {
  id: ID! # account address
  soul: Soul!
}

type Soul @entity {
  id: ID!
  owner: String! # account address
  type: String! # type to determine that the entity is created by an account or contract
  uri: String # metadata uri
  uriData: Bytes
  uriImage: String!
  uriFirstName: String!
  uriLastName: String!
  searchField: String
  participantGame: [GameParticipant!]! @derivedFrom(field: "sbt")
  participantProc: [ProcParticipant!]! @derivedFrom(field: "sbt")
}

type Game @entity {
  id: ID! # contract address
  hub: String! # hub address
  name: String!
  type: String!
  uri: String # metadata uri
  uriData: Bytes
  roles: [GameRole!]! @derivedFrom(field: "game")
  nominations: [GameNomination!]! @derivedFrom(field: "game")
  posts: [GamePost!]! @derivedFrom(field: "entity")
  participants: [GameParticipant!]! @derivedFrom(field: "entity")
  assoc: [GameAssoc!]! @derivedFrom(field: "bEnt")
}

type GameRole @entity {
  id: ID! # combination of game address and role id
  game: Game!
  roleId: BigInt!
  name: String!
  souls: [String!]!
  soulsCount: Int!
}

type GameNomination @entity {
  id: ID! # combination of game address and event transaction address
  game: Game!
  createdDate: BigInt!
  nominator: Soul!
  nominated: Soul!
}

type GamePost @entity {
  id: ID! # combination of game address and event transaction address
  entity: Game!
  createdDate: BigInt
  author: Soul!
  entityRole: String!
  uri: String
  metadata: Bytes
}

type Claim @entity {
  id: ID! # contract address
  name: String!
  hub: String # hub address
  game: Game
  type: String!
  stage: Int!
  uri: String # metadata uri
  uriData: Bytes
  createdDate: BigInt!
  updatedDate: BigInt
  roles: [ClaimRole!]! @derivedFrom(field: "claim")
  nominations: [ClaimNomination!]! @derivedFrom(field: "claim")
  posts: [ClaimPost!]! @derivedFrom(field: "entity")
  participants: [ProcParticipant!]! @derivedFrom(field: "entity")
  assoc: [ProcAssoc!]! @derivedFrom(field: "bEnt")
}

type ClaimRole @entity { # DEPRECATE
  id: ID! # combination of claim address and role id
  claim: Claim!
  name: String!
  roleId: BigInt!
  souls: [String!]!
  soulsCount: Int!
}

type ClaimNomination @entity {
  id: ID! # combination of claim address and event transaction address
  claim: Claim!
  createdDate: BigInt!
  nominator: Soul!
  nominated: Soul!
}

type ClaimPost @entity {
  id: ID! # combination of claim address and event transaction address
  entity: Claim!
  createdDate: BigInt
  author: Soul!
  entityRole: String
  uri: String
  metadata: Bytes
}

#[WIP]
type GameParticipant @entity {
  id: ID! 
  entity: Game!
  sbt: Soul!
  roles: [BigInt!]!
}
type ProcParticipant @entity {
  id: ID! 
  entity: Claim!
  sbt: Soul!
  roles: [BigInt!]!
}

type GameAssoc @entity {
  id: ID! # combination of claim address and SBT & roleId address
  bEnt: Game!
  sbt: Soul!
  role: BigInt!
}
type ProcAssoc @entity {
  id: ID! # combination of claim address and SBT & roleId address
  bEnt: Claim!
  sbt: Soul!
  role: BigInt!
}