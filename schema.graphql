# Interfaces

interface CTX {
  id: ID!
  name: String!
  type: String!
}

interface Post {
  id: ID!
  createdDate: BigInt
  author: Soul!
  uri: String!
  metadata: Bytes
}

interface Part {
  id: ID!
  sbt: Soul!
  roles: [String!]!
}

#Entity: Account
type Account @entity {
  id: ID! # account address
  sbt: Soul!
}

#Entity: OpenRepo [WIP]
type OpenRepo @entity {
  id: ID! # contract address
  conf: [RelAddress!]
}

type RelAddress @entity {
  id: ID! # Unique Combo
  owner: String! # Address
  key: String!
  value: [String!]! # Addresses
}

#Entity: Hub [WIP]
type Hub @entity {
  id: ID! # Address
  OpenRepo: String! # Address
  conf: [HubConf!]
}
type HubConf @entity {
  id: ID! #
}

#Separate Relations [DEV]
type GameRelAddress @entity {
  id: ID! # Unique Combo
  origin: Game!
  key: String!
  value: [String!]! # Addresses
}
type ClaimRelAddress @entity {
  id: ID! # Unique Combo
  origin: Claim!
  key: String!
  value: [String!]! # Addresses
}
type AccountRelAddress @entity {
  id: ID! # Unique Combo
  origin: Account!
  key: String!
  value: [String!]! # Addresses
}

#Entity: Soul
type Soul @entity {
  id: ID! # Token ID
  owner: String! # account address
  type: String! # human or contract type (classified by contract)
  role: String! # Entity's function designation
  stage: Int! # Entity's stage (as a process)
  # role: String # ?
  uri: String # metadata uri
  uriData: Bytes
  metadata: Bytes
  handle: String

  #DEPRECATE THESE
  uriImage: String!
  uriFirstName: String!
  uriLastName: String!

  image: String!
  name: String!
  tags: [String!]
  searchField: String
  participantGame: [GameParticipant!]! @derivedFrom(field: "sbt")
  participantProc: [ProcParticipant!]! @derivedFrom(field: "sbt")
  #reputation: [GameSoulOpinion!]! @derivedFrom(field: "sbt")
  opinion: [SoulSoulOpinion!]! @derivedFrom(field: "subject")
  opinionOn: [SoulSoulOpinion!]! @derivedFrom(field: "object")
  posts: [SoulPost!]! @derivedFrom(field: "author")
  # Semantic Relations
  assoc: [SoulAssoc!]! @derivedFrom(field: "aEnd")
  parts: [SoulPart!]! @derivedFrom(field: "aEnd")
  attrs: [SoulAttr!]! @derivedFrom(field: "aEnd")
}

## Reputation (SBT Opinions on SBT) [DEV]
#Opinion Change Events
type SoulSoulOpinionChange @entity {
  id: ID! # combination of subject, object, and domain name
  subject: Soul!
  object: Soul!
  domain: String!
  rating: Boolean!
  value: BigInt!
}

#Accumelated Opinion
type SoulSoulOpinion @entity {
  id: ID! # combination of subject, object, and domain name
  subject: Soul!
  object: Soul!
  domain: String!
  negativeRating: BigInt! #DEPRECATE
  positiveRating: BigInt! #DEPRECATE
  value: BigInt!
}

#Entity: Game
type Game implements CTX @entity {
  id: ID! # contract address
  hub: String! # hub address
  name: String!
  type: String!
  role: String! # Entity's function designation
  uri: String # metadata uri
  uriData: Bytes
  metadata: Bytes
  createdDate: BigInt!
  nominations: [GameNomination!]! @derivedFrom(field: "game")
  posts: [GamePost!]! @derivedFrom(field: "entity")

  #Relations to Souls (Parts / Members)
  roles: [GameRole!]! @derivedFrom(field: "game")
  rulse: [GameRule!]! @derivedFrom(field: "game")
  parts: [GameParticipant!]! @derivedFrom(field: "entity") # DEPRECATE?
  assoc: [GameAssoc!]! @derivedFrom(field: "bEnt") # DEPRECATE?
}

type GameRole @entity {
  id: ID! # combination of game address and role id
  game: Game!
  roleId: BigInt!
  name: String!
  souls: [String!]!
  soulsCount: Int!
}

#Entity: Rule
type GameRule @entity {
  id: ID! # combination of game address and role id
  game: Game!
  about: Action!
  aboutSubject: String
  ruleId: BigInt!
  affected: String
  uri: String
  uriData: Bytes
  metadata: Bytes
  uriName: String
  negation: Boolean
  effects: [GameRuleEffect!]!
  effectsBlock: BigInt # number of block where effects were defined
  confirmationRuling: String
  confirmationEvidence: Boolean
  confirmationWitness: BigInt
  isPositive: Boolean
  isDisabled: Boolean!
}

type GameRuleEffect @entity {
  id: ID! # combination of game address, rule id, effect name
  rule: GameRule!
  name: String!
  direction: Boolean!
  value: Int!
}

type GameNomination @entity {
  id: ID! # combination of game address and event transaction address
  game: Game!
  createdDate: BigInt!
  nominator: Soul!
  nominated: Soul!
}

type GamePost implements Post @entity {
  id: ID! # combination of game address and event transaction address
  entity: Game!
  createdDate: BigInt
  author: Soul!
  entityRole: String! # Role in CTX
  uri: String!
  metadata: Bytes
}

#Entity: Action
type Action @entity {
  id: ID! # guid
  subject: String
  verb: String
  object: String
  tool: String
  uri: String
  uriData: Bytes
  metadata: Bytes
  rules: [GameRule!]! @derivedFrom(field: "about")
}

#Entity: Claim/Task/Process
type Claim implements CTX @entity {
  id: ID! # contract address
  hub: String # hub address
  name: String!
  game: Game
  type: String!
  role: String! # Entity's function designation
  uri: String # metadata uri
  uriData: Bytes
  metadata: Bytes
  stage: Int!
  createdDate: BigInt!
  updatedDate: BigInt
  nominations: [ClaimNomination!]! @derivedFrom(field: "claim")
  posts: [ProcPost!]! @derivedFrom(field: "entity")
  stageURI: [ClaimStageURI!]! @derivedFrom(field: "entity")
  # Relations to Souls (Parts / Members)
  roles: [ClaimRole!]! @derivedFrom(field: "claim")
  participants: [ProcParticipant!]! @derivedFrom(field: "entity")
  # Relations
  assoc: [ProcAssoc!]! @derivedFrom(field: "bEnt")
}

type ClaimStageURI
  @entity { # [DEV]
  id: ID! # combination of claim address and stage name
  entity: Claim!
  stage: Int!
  uri: String!
  Author: String # SBT
}

type ClaimRole
  @entity { # DEPRECATE
  id: ID! # combination of claim address and role id
  claim: Claim!
  name: String!
  roleId: BigInt!
  souls: [String!]!
  soulsCount: Int!
}

type ClaimNomination @entity {
  id: ID! # combination of claim address and event transaction address
  claim: Claim!
  createdDate: BigInt!
  nominator: Soul!
  nominated: Soul!
}

type ProcPost implements Post @entity {
  id: ID! # combination of claim address and event transaction address
  entity: Claim!
  createdDate: BigInt
  author: Soul!
  entityRole: String!
  uri: String!
  metadata: Bytes
}

#[WIP]
type GameParticipant implements Part @entity {
  id: ID!
  entity: Game!
  sbt: Soul!
  roles: [String!]!
}
type ProcParticipant implements Part @entity {
  id: ID!
  entity: Claim!
  sbt: Soul!
  roles: [String!]!
}

type GameAssoc @entity {
  id: ID! # combination of claim address and SBT & roleId address
  bEnt: Game! # Group
  sbt: Soul! # Entity
  role: BigInt!
  qty: BigInt!
}
type ProcAssoc @entity {
  id: ID! # combination of claim address and SBT & roleId address
  bEnt: Claim! # Group
  sbt: Soul! # Entity
  role: BigInt!
  qty: BigInt!
}

# Semantic Relations

type SoulAssoc
  @entity { #S2H0
  id: ID! # combination of A,B,R
  aEnd: Soul!
  bEnd: Soul!
  role: String!
  qty: BigInt # Power/Influence
}

type SoulPart
  @entity { #S3H1
  id: ID! # combination of A,B,R
  aEnd: Soul!
  bEnd: Soul!
  role: String!
  qty: BigInt # Quantity?
}

type SoulAttr
  @entity { # S4H0
  id: ID! # combination of A,B,R
  aEnd: Soul!
  bEnd: String!
  role: String!
}

type SoulPost implements Post @entity {
  id: ID!
  createdDate: BigInt
  author: Soul!
  uri: String!
  context: String!
  metadata: Bytes
  #entityRole: String # Role in CTX
}